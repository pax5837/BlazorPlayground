@namespace DynamicUpdateComponent.Components.Parameters.EditableField

<div class="edit-field">
    <table>
        <tr>
            <td colspan="4" class="title">@FieldLabel</td>
        </tr>
        @if (ErrorText is not null)
        {
            <tr>
                <td colspan="4" class="error-text">@ErrorText</td>
            </tr>
        }
        <tr>
            @if (isEdit)
            {
                <td colspan="2"><input @ref="inputField" type="text" class="input-field" @bind="inputText" @oninput="HandleInputChanged" @onkeydown="OnKeyDown"></td>
                <td><button @onclick="Save" class="save-cancel-button">Save</button></td>
                <td><button @onclick="Cancel" class="save-cancel-button">Cancel</button></td>
            }
            else
            {
                <td colspan="2" width="50%"><input type="text" @bind="FieldValue" @onclick="EditValue"></td>
                <td colspan="2" width="50%"><button @onclick="EditValue" class="edit-button">Edit</button></td>
            }
        </tr>
        @if (ShowIncrementButtons)
        {
            <tr>
                <td colspan="2"><input type="text" @bind="incrementText" @oninput="HandleIncrementInputChanged"></td>
                <td><button @onclick="Increment" class="save-cancel-button">+</button></td>
                <td><button @onclick="Decrement" class="save-cancel-button">-</button></td>
            </tr>
        }

    </table>
</div>

@code {
    [Parameter] public string FieldId { get; set; } = string.Empty;

    [Parameter] public string FieldLabel { get; set; } = string.Empty;

    [Parameter] public string FieldValue { get; set; } = string.Empty;

    [Parameter] public EventCallback<EditableFieldChangedModel> OnSave { get; set; }

    [Parameter] public bool ShowIncrementButtons { get; set; }

    [Parameter] public Func<string, string?> Validator { get; set; } = s => null;

    private bool isEdit = false;

    private string inputText = string.Empty;

    private string incrementText = string.Empty;

    private string? ErrorText;


    private ElementReference inputField;

    private bool setFocusOnInputField;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && setFocusOnInputField && isEdit)
        {
            try
            {
                await inputField.FocusAsync();
                setFocusOnInputField = false;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

    private void Save()
    {
        ErrorText = Validator(inputText);
        if (ErrorText is not null)
        {
            return;
        }
        isEdit = false;
        OnSave.InvokeAsync(new EditableFieldChangedModel(FieldId, inputText, ChangeType.Value));
    }

    private void Cancel()
    {
        ErrorText = null;
        isEdit = false;
    }

    private void EditValue()
    {
        inputText = FieldValue;
        isEdit = true;
        setFocusOnInputField = true;
    }

    private void Increment()
    {
        isEdit = false;
        ErrorText = Validator(incrementText);
        if (ErrorText is not null)
        {
            return;
        }
        OnSave.InvokeAsync(new EditableFieldChangedModel(FieldId, incrementText, ChangeType.Increment));
    }

    private void Decrement()
    {
        isEdit = false;
        ErrorText = Validator(incrementText);
        if (ErrorText is not null)
        {
            return;
        }
        OnSave.InvokeAsync(new EditableFieldChangedModel(FieldId, incrementText, ChangeType.Decrement));
    }

    private void OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            Save();
        }

        if (args.Key == "Escape")
        {
            Cancel();
        }
    }

    private void HandleInputChanged(ChangeEventArgs args)
    {
        if (args?.Value == null)
        {
            return;
        }

        var textValue = args.Value.ToString();
        ErrorText = string.IsNullOrWhiteSpace(textValue)
            ? null
            : Validator(textValue);
        inputText = textValue;
    }

    private void HandleIncrementInputChanged(ChangeEventArgs args)
    {
        if (args?.Value == null)
        {
            return;
        }

        var incrementText = args.Value.ToString();
        ErrorText = string.IsNullOrWhiteSpace(incrementText) ? null : Validator(incrementText);;
        this.incrementText = incrementText;
    }
}