@using DynamicUpdateComponent.Contracts.ModelUpdate
@using DynamicUpdateComponent.Contracts.ViewModelUpdate
@* ReSharper disable RedundantUsingDirective *@
@using DynamicUpdateComponent.Components.Parameters.OneOfField
@using DynamicUpdateComponent.Components.Parameters.EditableField
@* ReSharper restore RedundantUsingDirective *@

@namespace DynamicUpdateComponent.Components.Parameters

<div>
    @foreach(var p in Parameters)
        {
            if (p.ModelValue.Type == ParameterModelValue.ParameterType.Enum)
            {
                var val = p.ModelValue.Switch<string>(x => x.Value, _ => string.Empty, _ => string.Empty);
                var vals = p.ModelValue.Switch<List<string>>(x => x.EnumValues.ToList(), _ => [], _ => []);
                <OneOfField
                    FieldId="@p.Id.ParameterId"
                    FieldLabel="@p.LabelText"
                    Value="@val"
                    Values="@vals"
                    OnChange="@SendUpdateEnum" />
            }
            else
            {
                var fieldValue = p.ModelValue.Switch<Number>(_ => throw new InvalidOperationException(), x => x.Value, x => x.Value);
                var showIncrementButtons = p.ModelValue.Switch<bool>(_ => false, x => x.ShowIncrementButtons, x => x.ShowIncrementButtons);
                <EditableField
                    FieldId="@p.Id.ParameterId"
                    FieldValue="@fieldValue"
                    OnSave="@SendUpdate"
                    FieldLabel="@p.LabelText"
                    ShowIncrementButtons="@showIncrementButtons" />
            }
        }
</div>
@code {
    [Parameter]
    public List<ParameterModel> Parameters { get; set; }

    [Parameter]
    public EventCallback<ParameterViewModel> OnChange { get; set; }

    private void SendUpdate(EditableFieldChangedModel model)
    {
        var parameter = Parameters.FirstOrDefault(p => p.Id.ParameterId == model.FieldId);
        if (parameter is null)
        {
            return;
        }

        model.FieldValue.Match(
            whenInteger: val => OnChange.InvokeAsync(new ParameterViewModel(parameter.Id, val)),
            whenDecimal: val => OnChange.InvokeAsync(new ParameterViewModel(parameter.Id, val)));
    }

    private void SendUpdateEnum(OneOfFieldChangedModel model)
    {
        var parameter = Parameters.FirstOrDefault(p => p.Id.ParameterId == model.FieldId);
        if (parameter is null)
        {
            return;
        }

        var enumValue = new DynamicUpdateComponent.Contracts.ViewModelUpdate.EnumValue(model.FieldValue);
        OnChange.InvokeAsync(new ParameterViewModel(parameter.Id, enumValue));
    }
}